import logging
from django.db import models
from cloud.models.base_model import BaseModel
from cloud.models.virtual_device import VirtualDevice

# Get an instance of a logger
logger = logging.getLogger(__name__)

VIRTUAL_INTERFACE_TYPES = (
        (u'bridge', u'Bridge'),
        (u'network', u'NAT'),
        (u'ethernet', u'Ethernet'),
# Disabled
#        (u'user', u'User Defined'),
#        (u'direct', u'Direct'),
#        (u'mcast', u'Multicast'),
)

class VirtualInterface(BaseModel):
    alias = models.CharField(max_length=20)
    attached_to = models.ForeignKey(
        VirtualDevice,
        verbose_name="Attached to"
    )
    if_type = models.CharField(max_length=10, choices=VIRTUAL_INTERFACE_TYPES, default='bridge', db_index=True)
    mac_address = models.CharField(max_length=17, blank=True, null=True) # Mac address auto generated by Aurora
    source = models.CharField(max_length=200, blank=True, null=True) # Bridge (bridge="virbr1") or virtual network name (network="default")
    target = models.CharField(max_length=200, blank=True, null=True) # Name of target virtual device (e.g., dev='vnet1') to be created by hypervisor (don't use prefix vnet or vif)

    # Generates mac address based on interface id
    def gen_mac_address(self):
        mac_str = str(self.id).zfill(12)
        return mac_str[0:2] + ":" + mac_str[2:4] + ":" + mac_str[4:6] + ":" + mac_str[6:8] + ":" + mac_str[8:10] + ":" + mac_str[10:12]

    def save(self, *args, **kwargs):
        # Save to generate id or update mac
        super(VirtualInterface, self).save(*args, **kwargs)

        need_to_save = False
        # Id exists generate mac
        if self.mac_address == None:
            self.mac_address = self.gen_mac_address()
            need_to_save = True

        if not self.target:
            self.target = "veth" + str(self.id)
            need_to_save = True

        if need_to_save:
            # This save will update changed information
            self.save()

    def list_connected_virtual_devices(self):
        return ", ".join([str(x) for x in self.connected_virtual_devices()])

    def connected_virtual_devices(self):
        output = []
        for vlink in self.virtuallink_set_start.all():
            output.append(vlink.if_end.attached_to)
        for vlink in self.virtuallink_set_end.all():
            output.append(vlink.if_start.attached_to)
        return output

    def __unicode__(self):
        return self.alias

    class VirtualInterfaceException(BaseModel.ModelException):
        pass


