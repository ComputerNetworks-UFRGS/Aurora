import logging
from django.db import models
from cloud.models.base_model import BaseModel
from cloud.models.virtual_router import VirtualRouter

# Get an instance of a logger
logger = logging.getLogger(__name__)

VIRTUAL_PORT_TYPES = (
        (u'bridge', u'Bridge'),
# Disabled
#        (u'network', u'NAT'),
#        (u'user', u'User Defined'),
#        (u'ethernet', u'Ethernet'),
#        (u'direct', u'Direct'),
#        (u'mcast', u'Multicast'),
)

class VirtualPort(BaseModel):
    alias = models.CharField(max_length=20)
    attached_to = models.ForeignKey(
        VirtualRouter,
        verbose_name="Attached to"
    )
    if_type = models.CharField(max_length=10, choices=VIRTUAL_PORT_TYPES, default='bridge', db_index=True)
    mac_address = models.CharField(max_length=17, blank=True, null=True) # Mac address auto generated by Aurora
    source = models.CharField(max_length=200, blank=True, null=True) # Bridge (bridge="virbr1") or virtual network name (network="default")
    target = models.CharField(max_length=200, blank=True, null=True) # Name of target virtual device (e.g., dev='vnet1') to be created by hypervisor (don't use prefix vnet or vif)

    # Generates mac address based on interface id
    def gen_mac_address(self):
        mac_str = str(self.id).zfill(12)
        return mac_str[0:2] + ":" + mac_str[2:4] + ":" + mac_str[4:6] + ":" + mac_str[6:8] + ":" + mac_str[8:10] + ":" + mac_str[10:12]

    def save(self, *args, **kwargs):
        # Save to generate id or update mac
        super(VirtualPort, self).save(*args, **kwargs)

        # Id exists generate mac
        if self.mac_address == None:
            self.mac_address = self.gen_mac_address()
            # This save will update mac address
            self.save()

    def __unicode__(self):
        return self.alias

    class VirtualPortException(BaseModel.ModelException):
        pass


